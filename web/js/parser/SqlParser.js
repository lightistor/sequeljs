/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,23],$V2=[1,26],$V3=[1,20],$V4=[1,16],$V5=[1,22],$V6=[1,18],$V7=[1,10],$V8=[1,11],$V9=[1,17],$Va=[1,21],$Vb=[1,27],$Vc=[1,24],$Vd=[1,25],$Ve=[1,29],$Vf=[5,43,73],$Vg=[2,72],$Vh=[1,30],$Vi=[20,21,39,41,45,47,49,50,60,80,81,114,116,119,126,127],$Vj=[5,22,24,26,27,29,33,34,35,38,40,43,45,52,61,64,65,66,67,68,69,70,71,72,73,75,122,123,124,125],$Vk=[1,33],$Vl=[5,22,24,26,27,29,33,34,35,38,40,43,45,52,61,64,65,66,67,68,69,70,71,72,73,75,77,122,123,124,125],$Vm=[1,35],$Vn=[5,22,24,26,27,29,33,34,35,38,40,43,45,46,52,61,64,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,87,88,97,98,103,104,106,122,123,124,125],$Vo=[1,56],$Vp=[1,57],$Vq=[5,22,24,26,27,29,33,34,35,38,40,43,45,46,52,61,64,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,87,88,97,98,103,104,106,108,109,122,123,124,125],$Vr=[1,59],$Vs=[1,58],$Vt=[1,60],$Vu=[5,22,24,26,27,29,33,34,35,38,40,43,45,46,49,52,61,64,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,87,88,97,98,103,104,106,108,109,111,112,122,123,124,125],$Vv=[21,39,41,45,47,49,50,60,80,81,114,116,119,126,127],$Vw=[21,39,41,45,47,60,94,95,96,114,116,119,126,127],$Vx=[1,97],$Vy=[2,113],$Vz=[1,98],$VA=[1,99],$VB=[1,109],$VC=[1,110],$VD=[29,43],$VE=[5,22,24,26,27,38,40,43,73],$VF=[5,22,24,26,27,29,38,40,43,52,73],$VG=[2,53],$VH=[1,140],$VI=[1,141],$VJ=[5,24,26,27,38,40,43,73],$VK=[1,167],$VL=[1,165],$VM=[1,166],$VN=[5,22,24,26,27,29,38,40,43,52,57,62,64,65,66,67,68,69,70,71,72,73],$VO=[1,179],$VP=[2,139],$VQ=[122,123,125],$VR=[5,26,27,38,40,43,73],$VS=[5,22,24,26,27,29,38,40,43,73],$VT=[1,187],$VU=[1,188],$VV=[1,189],$VW=[1,190],$VX=[1,191],$VY=[1,192],$VZ=[1,193],$V_=[1,194],$V$=[1,195],$V01=[5,22,24,26,27,29,38,40,43,64,65,66,67,68,69,70,71,72,73],$V11=[5,22,24,26,27,29,38,40,43,45,57,61,62,64,65,66,67,68,69,70,71,72,73],$V21=[1,198],$V31=[5,26,27,29,38,40,43,73],$V41=[5,27,38,40,43,73],$V51=[41,45,60],$V61=[5,22,24,26,27,29,38,40,43,57,64,65,66,67,68,69,70,71,72,73],$V71=[5,38,40,43,73],$V81=[5,40,43,73],$V91=[5,29,38,40,43,73],$Va1=[5,29,35,38,40,43,73],$Vb1=[1,240],$Vc1=[1,247],$Vd1=[1,245],$Ve1=[1,246],$Vf1=[1,248],$Vg1=[21,29,43,45,46,47];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"expressionPlus":6,"selectClauseItem":7,"SELECT":8,"optDistinctClause":9,"optTopClause":10,"selectExprList":11,"optTableExprList":12,"optWhereClause":13,"optGroupByClause":14,"optHavingClause":15,"optOrderByClause":16,"optLimitClause":17,"optQueryHintsClause":18,"DISTINCT":19,"TOP":20,"NUMERIC":21,"WHERE":22,"expression":23,"GROUP_BY":24,"commaSepExpressionList":25,"HAVING":26,"ORDER_BY":27,"orderByList":28,"COMMA":29,"orderByListItem":30,"optOrderByOrder":31,"optOrderByNulls":32,"ASC":33,"DESC":34,"NULLS":35,"FIRST":36,"LAST":37,"LIMIT":38,"BIND":39,"OPTION":40,"LPAREN":41,"queryHintList":42,"RPAREN":43,"queryHint":44,"IDENTIFIER":45,"CMP_EQUALS":46,"STRING":47,"selectExpr":48,"STAR":49,"QUALIFIED_STAR":50,"optTableExprAlias":51,"FROM":52,"tableExprList":53,"tableExpr":54,"joinComponent":55,"optJoinModifier":56,"ON":57,"tableExprPart":58,"optTableHintsClause":59,"QUALIFIED_IDENTIFIER":60,"AS":61,"WITH":62,"tableHintList":63,"JOIN":64,"LEFT_JOIN":65,"LEFT_OUTER_JOIN":66,"RIGHT_JOIN":67,"RIGHT_OUTER_JOIN":68,"FULL_JOIN":69,"INNER_JOIN":70,"CROSS_JOIN":71,"NATURAL_JOIN":72,"SET_OPERATOR":73,"andCondition":74,"LOGICAL_OR":75,"condition":76,"LOGICAL_AND":77,"operand":78,"conditionRightHandSide":79,"EXISTS":80,"LOGICAL_NOT":81,"compare":82,"CMP_NOTEQUALS":83,"CMP_NOTEQUALS_BASIC":84,"CMP_GREATER":85,"CMP_GREATEROREQUAL":86,"CMP_LESS":87,"CMP_LESSOREQUAL":88,"rhsCompareTest":89,"rhsIsTest":90,"rhsInTest":91,"rhsLikeTest":92,"rhsBetweenTest":93,"ALL":94,"ANY":95,"SOME":96,"IS":97,"IN":98,"rhsInClause":99,"functionParam":100,"functionExpressionList":101,"optFunctionExpressionList":102,"LIKE":103,"BETWEEN":104,"summand":105,"CONCAT":106,"factor":107,"PLUS":108,"MINUS":109,"term":110,"DIVIDE":111,"MODULO":112,"value":113,"QUOTED_IDENTIFIER":114,"caseWhen":115,"CAST":116,"dataType":117,"optDataTypeLength":118,"CASE":119,"caseWhenList":120,"optCaseWhenElse":121,"END":122,"WHEN":123,"THEN":124,"ELSE":125,"BOOLEAN":126,"NULL":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SELECT",19:"DISTINCT",20:"TOP",21:"NUMERIC",22:"WHERE",24:"GROUP_BY",26:"HAVING",27:"ORDER_BY",29:"COMMA",33:"ASC",34:"DESC",35:"NULLS",36:"FIRST",37:"LAST",38:"LIMIT",39:"BIND",40:"OPTION",41:"LPAREN",43:"RPAREN",45:"IDENTIFIER",46:"CMP_EQUALS",47:"STRING",49:"STAR",50:"QUALIFIED_STAR",52:"FROM",57:"ON",60:"QUALIFIED_IDENTIFIER",61:"AS",62:"WITH",64:"JOIN",65:"LEFT_JOIN",66:"LEFT_OUTER_JOIN",67:"RIGHT_JOIN",68:"RIGHT_OUTER_JOIN",69:"FULL_JOIN",70:"INNER_JOIN",71:"CROSS_JOIN",72:"NATURAL_JOIN",73:"SET_OPERATOR",75:"LOGICAL_OR",77:"LOGICAL_AND",80:"EXISTS",81:"LOGICAL_NOT",83:"CMP_NOTEQUALS",84:"CMP_NOTEQUALS_BASIC",85:"CMP_GREATER",86:"CMP_GREATEROREQUAL",87:"CMP_LESS",88:"CMP_LESSOREQUAL",94:"ALL",95:"ANY",96:"SOME",97:"IS",98:"IN",103:"LIKE",104:"BETWEEN",106:"CONCAT",108:"PLUS",109:"MINUS",111:"DIVIDE",112:"MODULO",114:"QUOTED_IDENTIFIER",116:"CAST",119:"CASE",122:"END",123:"WHEN",124:"THEN",125:"ELSE",126:"BOOLEAN",127:"NULL"},
productions_: [0,[3,2],[4,1],[7,11],[9,0],[9,1],[10,0],[10,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[16,0],[16,2],[28,3],[28,1],[30,3],[31,0],[31,1],[31,1],[32,0],[32,2],[32,2],[17,0],[17,2],[17,2],[18,0],[18,4],[42,3],[42,1],[44,2],[44,2],[44,2],[44,2],[44,1],[11,1],[11,3],[48,1],[48,1],[48,2],[12,0],[12,2],[53,1],[53,3],[54,1],[54,3],[54,5],[55,3],[58,1],[58,1],[58,3],[51,0],[51,1],[51,2],[59,0],[59,4],[63,3],[63,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[6,3],[6,3],[6,1],[6,1],[23,1],[23,3],[74,1],[74,3],[76,1],[76,2],[76,4],[76,2],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[79,1],[79,1],[79,1],[79,1],[79,1],[89,2],[89,5],[89,5],[89,5],[90,2],[90,3],[90,4],[90,5],[91,4],[91,5],[99,1],[99,3],[25,3],[25,1],[100,1],[100,2],[100,1],[100,1],[101,3],[101,1],[102,0],[102,1],[92,2],[92,3],[93,4],[93,5],[78,1],[78,3],[105,1],[105,3],[105,3],[107,1],[107,3],[107,3],[107,3],[110,1],[110,1],[110,1],[110,1],[110,1],[110,3],[110,4],[110,4],[110,6],[117,2],[117,2],[118,0],[118,3],[115,4],[120,5],[120,4],[121,0],[121,2],[113,1],[113,1],[113,1],[113,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2: case 7: case 9: case 11: case 13: case 15: case 20: case 21: case 26: case 27: case 43: case 50: case 51: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 107: case 109: case 110: case 114: case 119: case 121: case 124: case 132: case 145: case 146: case 147: case 148: case 149: case 150:
 this.$ = $$[$0]; 
break;
case 3:
 this.$ = {nodeType: 'Select', distinct: $$[$0-9], top: $$[$0-8], columns: $$[$0-7], from: $$[$0-6], where:$$[$0-5], groupBy:$$[$0-4], having:$$[$0-3],
              orderBy:$$[$0-2], limit:$$[$0-1], queryHints:$$[$0]}; 
break;
case 4:
 this.$ = false; 
break;
case 5:
 this.$ = true; 
break;
case 6: case 8: case 10: case 12: case 14: case 25: case 28: case 53: case 56: case 113: case 139: case 144:
 this.$ = null; 
break;
case 16: case 30: case 38: case 45: case 58: case 76: case 105: case 111:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 31: case 36: case 37: case 44: case 59: case 75: case 106: case 112:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19: case 60:
 this.$ = ''; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 29: case 52: case 57: case 101: case 140:
 this.$ = $$[$0-1]; 
break;
case 32: case 33: case 34: case 35:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 39:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 40:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 41:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 42:
 this.$ = []; 
break;
case 46:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 47:
 this.$ = $$[$0-2]; $$[$0-2].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-1]}); 
break;
case 48:
 this.$ = $$[$0-4]; $$[$0-4].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-3], expression:$$[$0]}); 
break;
case 49:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 54:
 this.$ = {value: $$[$0] }; 
break;
case 55:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 61:
 this.$ = 'LEFT'; 
break;
case 62:
 this.$ = 'LEFT OUTER'; 
break;
case 63:
 this.$ = 'RIGHT'; 
break;
case 64:
 this.$ = 'RIGHT OUTER'; 
break;
case 65:
 this.$ = 'FULL'; 
break;
case 66:
 this.$ = 'INNER'; 
break;
case 67:
 this.$ = 'CROSS'; 
break;
case 68:
 this.$ = 'NATURAL'; 
break;
case 69: case 70:
 this.$ = $$[$0-2]; $$[$0-2].push({nodeType:'SetOperator', value:$$[$0-1]}); $$[$0-2].push($$[$0]); 
break;
case 71: case 72:
 this.$ = [$$[$0]] 
break;
case 73:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 74:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 77:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 78:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 79:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 80:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 93:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 94: case 95: case 96:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 97:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 98:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 99:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 100:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 102:
 this.$ = $$[$0-1]; $$[$0-1].not = 1; 
break;
case 103:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0]}; 
break;
case 104:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0]}; $$[$0].unshift($$[$0-2]); 
break;
case 108:
 this.$ = { nodeType: 'DistinctFunctionParam', value: $$[$0]}; 
break;
case 115:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 116:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 117:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 118:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 120:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 122: case 123:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 125: case 126: case 127:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 128: case 129: case 130: case 131:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 133:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 134: case 135:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 136:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 137: case 138:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 141:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 142:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 143:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{1:[3]},{5:[1,28]},o([5,43],[2,2],{73:$Ve}),o($Vf,[2,71]),o($Vf,$Vg,{75:$Vh}),o($Vi,[2,4],{9:31,19:[1,32]}),o($Vj,[2,73],{77:$Vk}),o($Vl,[2,75]),o($Vl,[2,77],{79:34,89:36,90:37,91:38,92:39,93:40,82:41,46:[1,47],81:[1,44],83:[1,48],84:[1,49],85:[1,50],86:[1,51],87:[1,52],88:[1,53],97:[1,42],98:[1,43],103:[1,45],104:[1,46],106:$Vm}),{41:[1,54]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,76:55,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vn,[2,119],{108:$Vo,109:$Vp}),o($Vq,[2,121],{49:$Vr,111:$Vs,112:$Vt}),o($Vu,[2,124]),o($Vu,[2,128]),o($Vu,[2,129],{41:[1,61]}),o($Vu,[2,130]),o($Vu,[2,131],{41:[1,62]}),o($Vu,[2,132]),{6:63,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{41:[1,64]},o($Vu,[2,146]),o($Vu,[2,147]),o($Vu,[2,148]),o($Vu,[2,149]),o($Vu,[2,150]),{120:65,123:[1,66]},{1:[2,1]},{7:67,8:$V0,21:$V1,23:68,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:69,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vv,[2,6],{10:70,20:[1,71]}),o($Vi,[2,5]),{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,76:72,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,78]),{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,105:73,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,88]),o($Vl,[2,89]),o($Vl,[2,90]),o($Vl,[2,91]),o($Vl,[2,92]),{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:74,94:[1,75],95:[1,76],96:[1,77],105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{19:[1,80],21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:78,81:[1,79],105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{41:[1,81]},{98:[1,82],103:[1,83],104:[1,84]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:85,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:86,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vw,[2,81]),o($Vw,[2,82]),o($Vw,[2,83]),o($Vw,[2,84]),o($Vw,[2,85]),o($Vw,[2,86]),o($Vw,[2,87]),{4:87,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,80]),{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,107:88,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,107:89,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,110:90,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,110:91,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,110:92,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{19:$Vx,21:$V1,23:96,39:$V2,41:$V3,43:$Vy,45:$V4,47:$V5,49:$Vz,50:$VA,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,100:95,101:94,102:93,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{19:$Vx,21:$V1,23:96,39:$V2,41:$V3,43:$Vy,45:$V4,47:$V5,49:$Vz,50:$VA,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,100:95,101:94,102:100,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{43:[1,101],73:$Ve},{21:$V1,23:102,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{121:103,122:[2,144],123:[1,104],125:[1,105]},{21:$V1,23:106,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vf,[2,69]),o($Vf,[2,70],{75:$Vh}),o($Vj,[2,74],{77:$Vk}),{11:107,21:$V1,23:111,39:$V2,41:$V3,45:$V4,47:$V5,48:108,49:$VB,50:$VC,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:[1,112]},o($Vl,[2,76]),o($Vn,[2,120],{108:$Vo,109:$Vp}),o($Vl,[2,93],{106:$Vm}),{41:[1,113]},{41:[1,114]},{41:[1,115]},o($Vl,[2,97],{106:$Vm}),{19:[1,117],21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:116,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{52:[1,118]},{4:120,6:3,7:4,8:$V0,21:$V1,23:121,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,99:119,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{41:[1,122]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:123,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:124,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,115],{106:$Vm}),{77:[1,125],106:$Vm},{43:[1,126]},o($Vq,[2,122],{49:$Vr,111:$Vs,112:$Vt}),o($Vq,[2,123],{49:$Vr,111:$Vs,112:$Vt}),o($Vu,[2,125]),o($Vu,[2,126]),o($Vu,[2,127]),{43:[1,127]},{29:[1,128],43:[2,114]},o($VD,[2,112]),o($VD,[2,107],{75:$Vh}),{21:$V1,23:129,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VD,[2,109]),o($VD,[2,110]),{43:[1,130]},o($Vu,[2,133]),{61:[1,131],75:$Vh},{122:[1,132]},{21:$V1,23:133,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{21:$V1,23:134,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{75:$Vh,124:[1,135]},o($VE,[2,42],{12:136,29:[1,137],52:[1,138]}),o($VF,[2,37]),o($VF,[2,39]),o($VF,[2,40]),o($VF,$VG,{51:139,45:$VH,61:$VI,75:$Vh}),o($Vv,[2,7]),{4:142,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{4:143,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{4:144,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,98],{106:$Vm}),{52:[1,145]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:146,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{43:[1,147]},{43:[2,103]},o([43,73],$Vg,{29:[1,148],75:$Vh}),{4:120,6:3,7:4,8:$V0,21:$V1,23:121,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,99:149,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,116],{106:$Vm}),{77:[1,150],106:$Vm},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:151,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,79]),o($Vu,[2,134]),{19:$Vx,21:$V1,23:96,39:$V2,41:$V3,45:$V4,47:$V5,49:$Vz,50:$VA,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,100:152,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VD,[2,108],{75:$Vh}),o($Vu,[2,135]),{45:[1,154],114:[1,155],117:153},o($Vu,[2,141]),{75:$Vh,124:[1,156]},{75:$Vh,122:[2,145]},{21:$V1,23:157,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VJ,[2,8],{13:158,22:[1,159]}),{21:$V1,23:111,39:$V2,41:$V3,45:$V4,47:$V5,48:160,49:$VB,50:$VC,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{41:$VK,45:$VL,53:161,54:162,55:163,58:164,60:$VM},o($VF,[2,41]),o($VN,[2,54]),{45:[1,168]},{43:[1,169]},{43:[1,170]},{43:[1,171]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:172,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,99],{106:$Vm}),o($Vl,[2,101]),{21:$V1,23:174,25:173,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{43:[1,175]},{21:$V1,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,78:176,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($Vl,[2,117],{106:$Vm}),o($VD,[2,111]),{43:[1,177]},{41:$VO,43:$VP,118:178},{41:$VO,43:$VP,118:180},{21:$V1,23:181,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VQ,[2,143],{75:$Vh}),o($VR,[2,10],{14:182,24:[1,183]}),{21:$V1,23:184,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VF,[2,38]),o($VE,[2,43],{29:[1,185]}),o($VS,[2,44],{56:186,64:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$}),o($V01,[2,46]),o([5,22,24,26,27,29,38,40,43,57,62,64,65,66,67,68,69,70,71,72,73],$VG,{51:196,45:$VH,61:$VI}),o($V11,[2,50]),o($V11,[2,51]),{4:197,6:3,7:4,8:$V0,21:$V1,23:5,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VN,[2,55]),o($Vl,[2,94]),o($Vl,[2,95]),o($Vl,[2,96]),o($Vl,[2,100],{106:$Vm}),{29:$V21,43:[2,104]},o($V31,[2,106],{75:$Vh}),o($Vl,[2,102]),o($Vl,[2,118],{106:$Vm}),o($Vu,[2,136]),{43:[2,137]},{21:[1,199]},{43:[2,138]},o($VQ,[2,142],{75:$Vh}),o($V41,[2,12],{15:200,26:[1,201]}),{21:$V1,23:174,25:202,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VJ,[2,9],{75:$Vh}),{41:$VK,45:$VL,54:203,55:163,58:164,60:$VM},{41:$VK,45:$VL,55:204,58:164,60:$VM},o($V51,[2,60]),o($V51,[2,61]),o($V51,[2,62]),o($V51,[2,63]),o($V51,[2,64]),o($V51,[2,65]),o($V51,[2,66]),o($V51,[2,67]),o($V51,[2,68]),o($V61,[2,56],{59:205,62:[1,206]}),{43:[1,207]},{21:$V1,23:208,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{43:[1,209]},o($V71,[2,14],{16:210,27:[1,211]}),{21:$V1,23:212,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($VR,[2,11],{29:$V21}),o($VS,[2,45],{56:186,64:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$}),o($V01,[2,47],{57:[1,213]}),o($V61,[2,49]),{41:[1,214]},o($V11,[2,52]),o($V31,[2,105],{75:$Vh}),{43:[2,140]},o($V81,[2,25],{17:215,38:[1,216]}),{21:$V1,23:219,28:217,30:218,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($V41,[2,13],{75:$Vh}),{21:$V1,23:220,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},{45:[1,222],63:221},o($Vf,[2,28],{18:223,40:[1,224]}),{21:[1,225],39:[1,226]},o($V71,[2,15],{29:[1,227]}),o($V91,[2,17]),o($Va1,[2,19],{31:228,33:[1,229],34:[1,230],75:$Vh}),o($V01,[2,48],{75:$Vh}),{29:[1,232],43:[1,231]},o($VD,[2,59]),o($Vf,[2,3]),{41:[1,233]},o($V81,[2,26]),o($V81,[2,27]),{21:$V1,23:219,30:234,39:$V2,41:$V3,45:$V4,47:$V5,60:$V6,74:7,76:8,78:9,80:$V7,81:$V8,105:12,107:13,110:14,113:15,114:$V9,115:19,116:$Va,119:$Vb,126:$Vc,127:$Vd},o($V91,[2,22],{32:235,35:[1,236]}),o($Va1,[2,20]),o($Va1,[2,21]),o($V61,[2,57]),{45:[1,237]},{42:238,44:239,45:$Vb1},o($V91,[2,16]),o($V91,[2,18]),{36:[1,241],37:[1,242]},o($VD,[2,58]),{29:[1,244],43:[1,243]},o($VD,[2,31],{21:$Vc1,45:$Vd1,46:$Ve1,47:$Vf1}),o($Vg1,[2,36]),o($V91,[2,23]),o($V91,[2,24]),o($Vf,[2,29]),{44:249,45:$Vb1},o($Vg1,[2,32]),o($Vg1,[2,33]),o($Vg1,[2,34]),o($Vg1,[2,35]),o($VD,[2,30],{21:$Vc1,45:$Vd1,46:$Ve1,47:$Vf1})],
defaultActions: {28:[2,1],120:[2,103],178:[2,137],180:[2,138],209:[2,140]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 60
break;
case 2:return 50
break;
case 3:/* skip whitespace */
break;
case 4:return 8
break;
case 5:return 20
break;
case 6:return 52
break;
case 7:return 22
break;
case 8:return 19
break;
case 9:return 104
break;
case 10:return 24
break;
case 11:return 26
break;
case 12:return 27
break;
case 13:return 38
break;
case 14:return 73
break;
case 15:return 29
break;
case 16:return 108
break;
case 17:return 109
break;
case 18:return 111
break;
case 19:return 49
break;
case 20:return 112
break;
case 21:return 46
break;
case 22:return 83
break;
case 23:return 84
break;
case 24:return 86
break;
case 25:return 85
break;
case 26:return 88
break;
case 27:return 87
break;
case 28:return 41
break;
case 29:return 43
break;
case 30:return 106
break;
case 31:return 61
break;
case 32:return 94
break;
case 33:return 95
break;
case 34:return 96
break;
case 35:return 80
break;
case 36:return 97
break;
case 37:return 98
break;
case 38:return 57
break;
case 39:return 77
break;
case 40:return 75
break;
case 41:return 81
break;
case 42:return 70
break;
case 43:return 66
break;
case 44:return 68
break;
case 45:return 64
break;
case 46:return 65
break;
case 47:return 67
break;
case 48:return 69
break;
case 49:return 72
break;
case 50:return 71
break;
case 51:return 119
break;
case 52:return 123
break;
case 53:return 124
break;
case 54:return 125
break;
case 55:return 122
break;
case 56:return 103
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 36
break;
case 61:return 37
break;
case 62:return 40
break;
case 63:return 62
break;
case 64:return 116
break;
case 65:return 47
break;
case 66:return 127
break;
case 67:return 126
break;
case 68:return 21
break;
case 69:return 45
break;
case 70:return 114
break;
case 71:return 39
break;
case 72:return 5
break;
case 73:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:LIMIT\b)/i,/^(?:(UNION\s+ALL|UNION|INTERSECT|EXCEPT)\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\s+JOIN\b)/i,/^(?:LEFT\s+OUTER\s+JOIN\b)/i,/^(?:RIGHT\s+OUTER\s+JOIN\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\s+JOIN\b)/i,/^(?:RIGHT\s+JOIN\b)/i,/^(?:FULL\s+JOIN\b)/i,/^(?:NATURAL\s+JOIN\b)/i,/^(?:CROSS\s+JOIN\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:N?['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:["][a-zA-Z_][a-zA-Z0-9_]*["])/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();